/*
You are given an array consisting of n integers a1, a2, ..., an. Initially ax=1, all other elements are equal to 0.
You have to perform m operations. During the i-th operation, you choose two indices c and d such that li≤c,d≤ri, and swap ac and ad.
Calculate the number of indices k such that it is possible to choose the operations so that ak=1 in the end.
*/

#include <iostream>
#include<stdio.h> 
#include <bits/stdc++.h> 
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <iomanip>
#include<utility>
using namespace std;
#define ll long long
#define len length()
#define vi vector<int>
#define vl vector<ll>

#define fr(i,n) for(ll i=0;i<n;i++)
ll max(ll i,ll j){
    return i>j?i:j;
}
 

int removeDuplicates(vector<int>& nums) {
        int ind=1;
        int n=nums.size();
        if (n<=1) return n;
        for(int i=0;i<n-1;i++){
            
            if(nums[i+1]!=nums[i]){
                nums[ind]=nums[i+1];
                if(ind<n)
                ind++;
            }
            
            
        }
        nums.resize(ind);
        return ind;
}
 
int main(){
    int n;
    cin>>n;
 vector<int> v(n,0);
  fr(i,n){
      int x; cin>>x;
      v[i]=x;
  }

 sort(v.begin(),v.end());
 removeDuplicates(v);
 return 0;

}
 
